class Solution {
    public int median(int[][] mat) {
        // code here
        int r=mat.length;
        int c=mat[0].length;
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        
        // Find global min and max
        for (int i = 0; i < r; i++) {
            min = Math.min(min, mat[i][0]);
            max = Math.max(max, mat[i][c-1]);
        }

        int desired = (r * c + 1) / 2;

        while (min < max) {
            int mid = (min + max) / 2;
            int place = 0;

            // Count elements <= mid in each row
            for (int i = 0; i < r; i++) {
                place += upperBound(mat[i], mid);
            }

            if (place < desired) min = mid + 1;
            else max = mid;
        }
        return min;
    }

    // Binary search to find count of numbers <= target in a row
    private int upperBound(int[] row, int target) {
        int l = 0, h = row.length;
        while (l < h) {
            int mid = (l + h) / 2;
            if (row[mid] <= target) l = mid + 1;
            else h = mid;
        }
        return l;
    }
}
